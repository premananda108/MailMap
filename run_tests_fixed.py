#!/usr/bin/env python3
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π Firebase.
"""

import sys
import os
import subprocess
import time

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤
os.environ['TESTING'] = 'true'
os.environ['TEST_ENV'] = 'true'

def run_test_module(module_name):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–æ–¥—É–ª—è"""
    print(f"\n{'='*60}")
    print(f"–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è {module_name}")
    print(f"{'='*60}")
    
    start_time = time.time()
    
    try:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞
        env = os.environ.copy()
        env['TESTING'] = 'true'
        env['TEST_ENV'] = 'true'
        
        result = subprocess.run([
            sys.executable, '-m', 'pytest', 
            f'tests/test_{module_name}.py', 
            '-v', '--tb=short'
        ], capture_output=True, text=True, timeout=60, env=env)
        
        end_time = time.time()
        duration = end_time - start_time
        
        print(f"–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {duration:.2f} —Å–µ–∫—É–Ω–¥")
        
        if result.returncode == 0:
            print(f"‚úÖ –¢–µ—Å—Ç—ã {module_name} –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")
            return True
        else:
            print(f"‚ùå –¢–µ—Å—Ç—ã {module_name} –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å")
            print("–í—ã–≤–æ–¥:")
            print(result.stdout)
            print("–û—à–∏–±–∫–∏:")
            print(result.stderr)
            return False
            
    except subprocess.TimeoutExpired:
        print(f"‚è∞ –¢–µ—Å—Ç—ã {module_name} –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ª–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏")
        return False
    except Exception as e:
        print(f"üí• –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ {module_name}: {e}")
        return False

def run_integration_tests():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã"""
    print(f"\n{'='*60}")
    print("–ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤")
    print(f"{'='*60}")
    
    start_time = time.time()
    
    try:
        env = os.environ.copy()
        env['TESTING'] = 'true'
        env['TEST_ENV'] = 'true'
        
        result = subprocess.run([
            sys.executable, '-m', 'pytest', 
            'tests/test_integration.py', 
            '-v', '--tb=short'
        ], capture_output=True, text=True, timeout=120, env=env)
        
        end_time = time.time()
        duration = end_time - start_time
        
        print(f"–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {duration:.2f} —Å–µ–∫—É–Ω–¥")
        
        if result.returncode == 0:
            print("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")
            return True
        else:
            print("‚ùå –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å")
            print("–í—ã–≤–æ–¥:")
            print(result.stdout)
            print("–û—à–∏–±–∫–∏:")
            print(result.stderr)
            return False
            
    except subprocess.TimeoutExpired:
        print("‚è∞ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ª–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏")
        return False
    except Exception as e:
        print(f"üí• –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {e}")
        return False

def run_compatibility_tests():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç—ã —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
    print(f"\n{'='*60}")
    print("–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏")
    print(f"{'='*60}")
    
    start_time = time.time()
    
    try:
        env = os.environ.copy()
        env['TESTING'] = 'true'
        env['TEST_ENV'] = 'true'
        
        result = subprocess.run([
            sys.executable, '-m', 'pytest', 
            'tests/test_compatibility.py', 
            '-v', '--tb=short'
        ], capture_output=True, text=True, timeout=60, env=env)
        
        end_time = time.time()
        duration = end_time - start_time
        
        print(f"–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {duration:.2f} —Å–µ–∫—É–Ω–¥")
        
        if result.returncode == 0:
            print("‚úÖ –¢–µ—Å—Ç—ã —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")
            return True
        else:
            print("‚ùå –¢–µ—Å—Ç—ã —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å")
            print("–í—ã–≤–æ–¥:")
            print(result.stdout)
            print("–û—à–∏–±–∫–∏:")
            print(result.stderr)
            return False
            
    except subprocess.TimeoutExpired:
        print("‚è∞ –¢–µ—Å—Ç—ã —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ª–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏")
        return False
    except Exception as e:
        print(f"üí• –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏: {e}")
        return False

def run_all_tests():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±—Ö—É–∫–æ–≤")
    print(f"Python –≤–µ—Ä—Å–∏—è: {sys.version}")
    print(f"–†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.getcwd()}")
    print(f"TESTING: {os.environ.get('TESTING', 'Not set')}")
    print(f"TEST_ENV: {os.environ.get('TEST_ENV', 'Not set')}")
    
    # –°–ø–∏—Å–æ–∫ –º–æ–¥—É–ª–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    modules = [
        'utils',
        'firestore_utils', 
        'image_utils',
        'webhook_handler'
    ]
    
    results = {}
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –º–æ–¥—É–ª–µ–π
    for module in modules:
        results[module] = run_test_module(module)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
    results['integration'] = run_integration_tests()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    results['compatibility'] = run_compatibility_tests()
    
    # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print(f"\n{'='*60}")
    print("–ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    print(f"{'='*60}")
    
    total_tests = len(results)
    passed_tests = sum(results.values())
    failed_tests = total_tests - passed_tests
    
    print(f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö –Ω–∞–±–æ—Ä–æ–≤: {total_tests}")
    print(f"–£—Å–ø–µ—à–Ω–æ: {passed_tests}")
    print(f"–ü—Ä–æ–≤–∞–ª–∏–ª–æ—Å—å: {failed_tests}")
    print(f"–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(passed_tests/total_tests)*100:.1f}%")
    
    print("\n–î–µ—Ç–∞–ª–∏:")
    for test_name, result in results.items():
        status = "‚úÖ –ü–†–û–®–ï–õ" if result else "‚ùå –ü–†–û–í–ê–õ–ò–õ–°–Ø"
        print(f"  {test_name}: {status}")
    
    if failed_tests == 0:
        print(f"\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        return 0
    else:
        print(f"\n‚ö†Ô∏è  {failed_tests} –¢–ï–°–¢–û–í –ü–†–û–í–ê–õ–ò–õ–û–°–¨")
        return 1

if __name__ == "__main__":
    sys.exit(run_all_tests()) 